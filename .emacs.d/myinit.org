#+STARTUP: overview
#+TITLE: Emacs Configuration
#+AUTHOR: Vinodh MJ Human
#+EMAIL: 
#+OPTIONS: toc:nil num:nil
* Pre-requisites
#+BEGIN_SRC emacs-lisp
;;Install paradox package manager
(use-package paradox
:ensure t)

;; set browser to firefox
(setq browse-url-browser-function 'browse-url-firefox)
#+END_SRC
* Stolen from hrs
** General
#+BEGIN_SRC emacs-lisp
(defun vmj/view-buffer-name ()
    "Display the filename of the current buffer."
    (interactive)
    (message (buffer-file-name)))

(defun vmj/generate-scratch-buffer ()
    "Create and switch to a temporary scratch buffer with a random
       name."
    (interactive)
    (switch-to-buffer (make-temp-name "scratch-")))

(defun hrs/kill-current-buffer ()
    "Kill the current buffer without prompting."
    (interactive)
    (kill-buffer (current-buffer)))
#+END_SRC
** Frame title
The default frame title isn't useful. This binds it to the name of the current
project:

#+BEGIN_SRC emacs-lisp
;  (setq frame-title-format '((:eval (projectile-project-name))))
#+END_SRC

** Use fancy lambdas

Why not?

#+BEGIN_SRC emacs-lisp
  (global-prettify-symbols-mode t)
#+END_SRC

** Custom solarized-dark theme

I like the solarized-dark theme. I prefer keeping all the characters in the same
side and font, though.

#+BEGIN_SRC emacs-lisp
  (defun vmj/apply-solarized-theme ()
    (setq solarized-use-variable-pitch nil)
    (setq solarized-height-plus-1 1.0)
    (setq solarized-height-plus-2 1.0)
    (setq solarized-height-plus-3 1.0)
    (setq solarized-height-plus-4 1.0)
    (setq solarized-high-contrast-mode-line t)
    (load-theme 'solarized-dark t))
#+END_SRC

If this code is being evaluated by =emacs --daemon=, ensure that each subsequent
frame is themed appropriately.

#+BEGIN_SRC emacs-lisp
  (if (daemonp)
      (add-hook 'after-make-frame-functions
                (lambda (frame)
                    (vmj/apply-solarized-theme)))
    (vmj/apply-solarized-theme))
#+END_SRC

** Hide certain modes from the modeline

I'd rather have only a few necessary mode identifiers on my modeline. This
either hides or "renames" a variety of major or minor modes using the =diminish=
package.

#+BEGIN_SRC emacs-lisp
  (defmacro diminish-minor-mode (filename mode &optional abbrev)
    `(eval-after-load (symbol-name ,filename)
       '(diminish ,mode ,abbrev)))

  (defmacro diminish-major-mode (mode-hook abbrev)
    `(add-hook ,mode-hook
               (lambda () (setq mode-name ,abbrev))))

  (diminish-minor-mode 'abbrev 'abbrev-mode)
  (diminish-minor-mode 'simple 'auto-fill-function)
  (diminish-minor-mode 'company 'company-mode)
  (diminish-minor-mode 'eldoc 'eldoc-mode)
  (diminish-minor-mode 'flycheck 'flycheck-mode)
  (diminish-minor-mode 'flyspell 'flyspell-mode)
  (diminish-minor-mode 'global-whitespace 'global-whitespace-mode)
  (diminish-minor-mode 'projectile 'projectile-mode)
  (diminish-minor-mode 'ruby-end 'ruby-end-mode)
  (diminish-minor-mode 'subword 'subword-mode)
  (diminish-minor-mode 'undo-tree 'undo-tree-mode)
  (diminish-minor-mode 'yard-mode 'yard-mode)
  (diminish-minor-mode 'yasnippet 'yas-minor-mode)
  (diminish-minor-mode 'wrap-region 'wrap-region-mode)

  (diminish-minor-mode 'paredit 'paredit-mode " π")

  (diminish-major-mode 'emacs-lisp-mode-hook "el")
  (diminish-major-mode 'haskell-mode-hook "λ=")
  (diminish-major-mode 'lisp-interaction-mode-hook "λ")
  (diminish-major-mode 'python-mode-hook "Py")
#+END_SRC
* Interface tweaks
** Start up
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
  (tool-bar-mode -1)
  (fset 'yes-or-no-p 'y-or-n-p)
  (global-linum-mode t) ;; enable line numbers globally
  (add-to-list 'default-frame-alist '(fullscreen . maximized))
  (setq ivy-use-virtual-buffers t)
  (defun jump-to-next-newline()
  "Move to the end of the line and return"
  (interactive)
  (move-end-of-line)
  (newline))
  (setq ivy-format-function 'ivy-format-function-line)
  (setq ivy-display-style 'fancy)
;;(setq view-read-only t)
 
#+END_SRC

** Ace windows for easy window switching
#+BEGIN_SRC emacs-lisp
  (use-package ace-window
  :ensure t
  :init
  (progn
  (setq aw-scope 'frame)
  (global-set-key (kbd "C-x O") 'other-frame)
    (global-set-key [remap other-window] 'ace-window)
    (custom-set-faces
     '(aw-leading-char-face
       ((t (:inherit ace-jump-face-foreground :height 3.0))))) 
    ))

(defun swap-window()
"Swap windows and leave focus on the original window"
(interactive)
(ace-swap-window)
(aw-flip-window))

#+END_SRC

#+RESULTS:

** Themes and modeline:
#+BEGIN_SRC emacs-lisp
(use-package moe-theme
:ensure t)

(use-package powerline
:ensure t
:config
(powerline-moe-theme)
(setq moe-theme-highlight-buffer-id t)
)
(set-frame-font "DejaVu Sans Mono 14" nil t)
(add-to-list 'default-frame-alist '(font . "DejaVu Sans Mono 12"))
#+END_SRC

#+RESULTS:
: t
* Org mode
** org bullets
Org bullets makes things look pretty

#+BEGIN_SRC emacs-lisp
(use-package org-bullets
:ensure t
:config
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

#+END_SRC
** org custom variables
#+BEGIN_SRC emacs-lisp
(custom-set-variables
'(org-directory "~/Dropbox/orgfiles")
'(org-default-notes-file (concat org-directory "/notes.org"))
'(org-export-html-postamble nil)
'(org-hide-leading-stars t)
'(org-startup-folded (quote overview))
'(org-startup-indented t)
)

(setq org-file-apps
(append '(
("\\.pdf\\'" . "evince %s")
) org-file-apps ))

#+END_SRC
** org agenda
#+BEGIN_SRC emacs-lisp

;;scheduling 
(global-set-key "\C-ca" 'org-agenda)

(setq org-agenda-custom-commands
'(("c" "Simple agenda view"
((agenda "")
(alltodo "")))))

#+END_SRC
** org ac
#+BEGIN_SRC emacs-lisp

(use-package org-ac
:ensure t
:init (progn
(require 'org-ac)
(org-ac/config-default)
))

(add-to-list 'ac-modes 'org-mode)

#+END_SRC
** org capture
#+BEGIN_SRC emacs-lisp

(global-set-key (kbd "C-c c") 'org-capture)

            (setq org-agenda-files (list "~/Dropbox/orgfiles/gcal.org"
          			       "~/Dropbox/orgfiles/i.org"
          			       "~/Dropbox/orgfiles/y.org"
          			       "~/Dropbox/orgfiles/word.org"))

            (setq org-capture-templates
          			  '(("a" "Appointment" entry (file  "~/Dropbox/orgfiles/gcal.org" )
          				   "* %?\n\n%^T\n\n:PROPERTIES:\n\n:END:\n\n")
          				  ("l" "Link" entry (file+headline "~/Dropbox/orgfiles/links.org" "Links")
          				   "* %? %^L" :prepend t)
          				  ("b" "Blog idea" entry (file+headline "~/Dropbox/orgfiles/y.org" "Blog Topics:")
          				   "* %?\n" :prepend t)
                                        ("y" "Youtube idea" entry (file+headline "~/Dropbox/orgfiles/y.org" "Youtube Topics:")
          				   "* %?\n" :prepend t)
          				  ("t" "To Do Item" entry (file+headline "~/Dropbox/orgfiles/i.org" "To Do")
          				   "* TODO %? \n%u" :prepend t)
  					  ("d" "Detailed To Do Item" entry (file+headline "~/Dropbox/orgfiles/i.org" "To Do")
          				   "* TODO %^C %? %^g\n%u" :prepend t)
  					  ("n" "Note" entry (file+headline "~/Dropbox/orgfiles/i.org" "Notes")
          				   "* %?\n%u" :prepend t)
  					  ("w" "Word" entry (file+headline "~/Dropbox/orgfiles/word.org" "Words")
          				   "* %?\n" :prepend t)
  					  ("p" "Phrase" entry (file+headline "~/Dropbox/orgfiles/word.org" "Phrases")
          				   "* %?\n" :prepend t)
  					  ))
#+END_SRC

** org mobile   
#+BEGIN_SRC emacs-lisp        
;; Set to the name of the file where new notes will be stored
(setq org-mobile-inbox-for-pull "~/Dropbox/orgfiles/mobile.org")
;; Set to <your Dropbox root directory>/MobileOrg.
(setq org-mobile-directory "~/Dropbox/Apps/MobileOrg")
(run-with-idle-timer 120 1 'org-mobile-pull)
(run-with-idle-timer 60 1 'org-mobile-push)

#+END_SRC

** org refile
#+BEGIN_SRC emacs-lisp

(setq org-refile-targets '((org-agenda-files :maxlevel . 1)))
(setq org-refile-use-outline-path 'file)
(setq org-outline-path-complete-in-steps nil)
#+END_SRC

** org other stuff
#+BEGIN_SRC emacs-lisp

(defadvice org-capture-finalize 
            (after delete-capture-frame activate)  
        "Advise capture-finalize to close the frame"  
        (if (equal "capture" (frame-parameter nil 'name))  
        (delete-frame)))

        (defadvice org-capture-destroy 
            (after delete-capture-frame activate)  
        "Advise capture-destroy to close the frame"  
        (if (equal "capture" (frame-parameter nil 'name))  
        (delete-frame)))  

        (use-package noflet
        :ensure t )
        (defun make-capture-frame ()
        "Create a new frame and run org-capture."
        (interactive)
        (make-frame '((name . "capture")))
        (select-frame-by-name "capture")
        (delete-other-windows)
        (noflet ((switch-to-buffer-other-window (buf) (switch-to-buffer buf)))
            (org-capture)))

(require 'ox-beamer)
;(use-package epresent
;:ensure t)

#+END_SRC

#+RESULTS:
: make-capture-frame

* abo-abo
** Swiper / Ivy / Counsel
Swiper gives us a really efficient incremental search with regular expressions
and Ivy / Counsel replace a lot of ido or helms completion functionality
#+BEGIN_SRC emacs-lisp
  (use-package counsel
   :ensure t
   :bind
   (("M-y" . counsel-yank-pop)
   :map ivy-minibuffer-map
   ("M-y" . ivy-next-line)))

  (use-package ivy
  :ensure t
  :diminish (ivy-mode)
  :bind (("C-x b" . ivy-switch-buffer))
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq ivy-display-style 'fancy))

  (use-package swiper
  :ensure t
  :bind (("C-s" . swiper)
	 ("C-r" . swiper)
	 ("C-c C-r" . ivy-resume)
	 ("M-x" . counsel-M-x)
       ("C-x r b" . counsel-bookmark)
	 ("C-x C-f" . counsel-find-file))
  :config
  (progn
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-display-style 'fancy)
    (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
    ))

(defface ivy-current-match
  '((((class color) (background light))
     :background "#1a4b77" :foreground "white")
    (((class color) (background dark))
     :background "#65a7e2" :foreground "black"))
  "Face used by Ivy for highlighting first match.")

#+END_SRC

** Avy
navigate by searching for a letter on the screen and jumping to it
See https://github.com/abo-abo/avy for more info
#+BEGIN_SRC emacs-lisp
  (use-package avy
  :ensure t
  :bind ("M-s" . avy-goto-word-1)) ;; changed from char as per jcs
#+END_SRC
** Hydra
#+BEGIN_SRC emacs-lisp
  (use-package hydra 
    :ensure hydra
    :init 
    (global-set-key
    (kbd "C-x t")
	    (defhydra toggle (:color blue)
	      "toggle"
	      ("a" abbrev-mode "abbrev")
	      ("s" flyspell-mode "flyspell")
	      ("d" toggle-debug-on-error "debug")
	      ("c" fci-mode "fCi")
	      ("f" auto-fill-mode "fill")
	      ("t" toggle-truncate-lines "truncate")
	      ("w" whitespace-mode "whitespace")
	      ("q" nil "cancel")))
    (global-set-key
     (kbd "C-x j")
     (defhydra gotoline 
       ( :pre (linum-mode 1)
	      :post (linum-mode -1))
       "goto"
       ("t" (lambda () (interactive)(move-to-window-line-top-bottom 0)) "top")
       ("b" (lambda () (interactive)(move-to-window-line-top-bottom -1)) "bottom")
       ("m" (lambda () (interactive)(move-to-window-line-top-bottom)) "middle")
       ("e" (lambda () (interactive)(end-of-buffer)) "end")
       ("c" recenter-top-bottom "recenter")
       ("n" next-line "down")
       ("p" (lambda () (interactive) (forward-line -1))  "up")
       ("g" goto-line "goto-line")
       ))
    (global-set-key
     (kbd "C-c t")
     (defhydra hydra-global-org (:color blue)
       "Org"
       ("t" org-timer-start "Start Timer")
       ("s" org-timer-stop "Stop Timer")
       ("r" org-timer-set-timer "Set Timer") ; This one requires you be in an orgmode doc, as it sets the timer for the header
       ("p" org-timer "Print Timer") ; output timer value to buffer
       ("w" (org-clock-in '(4)) "Clock-In") ; used with (org-clock-persistence-insinuate) (setq org-clock-persist t)
       ("o" org-clock-out "Clock-Out") ; you might also want (setq org-log-note-clock-out t)
       ("j" org-clock-goto "Clock Goto") ; global visit the clocked task
       ("c" org-capture "Capture") ; Don't forget to define the captures you want http://orgmode.org/manual/Capture.html
	     ("l" (or )rg-capture-goto-last-stored "Last Capture"))))

(global-set-key
     (kbd "C-x f")
     (defhydra frequent (:color blue)
       "frequent"
       ("f" counsel-find-file "find-file")
       ("l" mlint-clear-warnings "mlint clear")
       ("b" counsel-bookmark "bookmarks")
       ("a" mark-whole-buffer "select all")
       ("r" revert-buffer "refresh")
       ("p" crepro "projectile")
       ("s" (find-file "/local-ssd/vjayakri") "ssd")
       ("n" (find-file "/mathworks/devel/sandbox/vjayakri") "sbs")
       ("t" toggle-truncate-lines "toggle truncate")))
     
#+END_SRC

#+RESULTS:
* Necessary
** Misc packages
#+BEGIN_SRC emacs-lisp

  ; Highlights the current cursor line
  (global-hl-line-mode t)
  
  ; flashes the cursor's line when you scroll
  (use-package beacon
  :ensure t
  :config
  (beacon-mode 1)
  ; (setq beacon-color "#666600")
  )
  
  ; deletes all the whitespace when you hit backspace or delete
  (use-package hungry-delete
  :ensure t
  :config
  (global-hungry-delete-mode))
  
  ; expand the marked region in semantic increments (negative prefix to reduce region)
  (use-package expand-region
  :ensure t
  :config 
  (global-set-key (kbd "C-=") 'er/expand-region))

  (setq save-interprogram-paste-before-kill t)

  ; font scaling
  (use-package default-text-scale
  :ensure t
  :config
  (global-set-key (kbd "C-M-=") 'default-text-scale-increase)
  (global-set-key (kbd "C-M--") 'default-text-scale-decrease))

  ;origami folding
  (use-package origami
  :ensure t)

  (use-package which-key
	:ensure t 
	:config
	(which-key-mode))

#+END_SRC
** Autocomplete
#+BEGIN_SRC emacs-lisp
  (use-package auto-complete
  :ensure t
  :init
  (progn
    (ac-config-default)
    (global-auto-complete-mode t)
    (add-to-list 'ac-modes 'matlab-mode)
    (add-to-list 'ac-modes 'nxml-mode)
    ))
#+END_SRC
  
** Flycheck
#+BEGIN_SRC emacs-lisp
    (use-package flycheck
      :ensure t
      :init
      (global-flycheck-mode t))

;(add-hook 'text-mode-hook 'flyspell-mode)
;(add-hook 'prog-mode-hook 'flyspell-prog-mode)
#+END_SRC
** Yasnippet
#+BEGIN_SRC emacs-lisp
    (use-package yasnippet
      :ensure t
      :init
        (yas-global-mode 1))

#+END_SRC
** Undo Tree
#+BEGIN_SRC emacs-lisp
    (use-package undo-tree
      :ensure t
      :init
      (global-undo-tree-mode))
#+END_SRC
** Reveal.js
#+BEGIN_SRC emacs-lisp
    (use-package ox-reveal
    :ensure ox-reveal)

    (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
    (setq org-reveal-mathjax t)

    (use-package htmlize
    :ensure t)
#+END_SRC

#+RESULTS:
: t

** iedit and narrow / widen dwim

#+BEGIN_SRC emacs-lisp
  ; mark and edit all copies of the marked region simultaneously. 
  (use-package iedit
  :ensure t)
  
  ; if you're windened, narrow to the region, if you're narrowed, widen
  ; bound to C-x n
  (defun narrow-or-widen-dwim (p)
  "If the buffer is narrowed, it widens. Otherwise, it narrows intelligently.
  Intelligently means: region, org-src-block, org-subtree, or defun,
  whichever applies first.
  Narrowing to org-src-block actually calls `org-edit-src-code'.
  
  With prefix P, don't widen, just narrow even if buffer is already
  narrowed."
  (interactive "P")
  (declare (interactive-only))
  (cond ((and (buffer-narrowed-p) (not p)) (widen))
  ((region-active-p)
  (narrow-to-region (region-beginning) (region-end)))
  ((derived-mode-p 'org-mode)
  ;; `org-edit-src-code' is not a real narrowing command.
  ;; Remove this first conditional if you don't want it.
  (cond ((ignore-errors (org-edit-src-code))
  (delete-other-windows))
  ((org-at-block-p)
  (org-narrow-to-block))
  (t (org-narrow-to-subtree))))
  (t (narrow-to-defun))))
  
  ;; (define-key endless/toggle-map "n" #'narrow-or-widen-dwim)
  ;; This line actually replaces Emacs' entire narrowing keymap, that's
  ;; how much I like this command. Only copy it if that's what you want.
  (define-key ctl-x-map "n" #'narrow-or-widen-dwim)
  
#+END_SRC


#+RESULTS:
: narrow-or-widen-dwim
** Dired
  #+BEGIN_SRC emacs-lisp
  (use-package dired+
  :ensure t
  :config (require 'dired+)
  )
  (use-package dired-quick-sort
  :ensure t
  :config
  (dired-quick-sort-setup))

  #+END_SRC
** Ibuffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
   (setq ibuffer-saved-filter-groups
	 (quote (("default"
                  ("dired" (mode . dired-mode))
		  ("org" (name . "^.*org$"))
                
		  ("web" (or (mode . web-mode) (mode . js2-mode)))
		  ("shell" (or (mode . eshell-mode) (mode . shell-mode)))
		  ("programming" (or
				  (mode . python-mode)
		                  (mode . matlab-mode)
				  (mode . c++-mode)))

                                ("emacs" (or
                            (name . "^\\*scratch\\*$")
                            (name . "^\\*Messages\\*$")))
				  ))))
   (add-hook 'ibuffer-mode-hook
             (lambda ()
               (ibuffer-switch-to-saved-filter-groups "default")))
               

#+END_SRC
* Programming essentials
** Babel

#+BEGIN_SRC emacs-lisp
(org-babel-do-load-languages
'org-babel-load-languages
'((python . t)
   (emacs-lisp . t)
   (C . t)
(js . t)
   (ditaa . t)
   (dot . t)
   (org . t)
      (sh . t )
   (shell . t )
(latex . t )
   ))
#+END_SRC
** Projectile
#+BEGIN_SRC emacs-lisp
  ;; Projectile
  (use-package projectile
   :ensure t
   :config
   (projectile-global-mode)
   (setq projectile-completion-system 'ivy))

;;  (use-package counsel-projectile
  ;; :ensure t
  ;; :config
  ;; (counsel-projectile-on))

#+END_SRC

#+RESULTS:
: t

** Smart Parens
#+BEGIN_SRC emacs-lisp
(use-package smartparens
:ensure t
:config
(use-package smartparens-config)
(use-package smartparens-html)
(use-package smartparens-python)
(use-package smartparens-latex)
(smartparens-global-mode t)
(show-smartparens-global-mode t)
:bind
( ("C-<down>" . sp-down-sexp)
 ("C-<up>"   . sp-up-sexp)
 ("M-<down>" . sp-backward-down-sexp)
 ("M-<up>"   . sp-backward-up-sexp)
("C-M-a" . sp-beginning-of-sexp)
 ("C-M-e" . sp-end-of-sexp)



 ("C-M-f" . sp-forward-sexp)
 ("C-M-b" . sp-backward-sexp)

 ("C-M-n" . sp-next-sexp)
 ("C-M-p" . sp-previous-sexp)

 ("C-S-f" . sp-forward-symbol)
 ("C-S-b" . sp-backward-symbol)

 ("C-<right>" . sp-forward-slurp-sexp)
 ("M-<right>" . sp-forward-barf-sexp)
 ("C-<left>"  . sp-backward-slurp-sexp)
 ("M-<left>"  . sp-backward-barf-sexp)

 ("C-M-t" . sp-transpose-sexp)
 ("C-M-k" . sp-kill-sexp)
 ("C-k"   . sp-kill-hybrid-sexp)
 ("M-k"   . sp-backward-kill-sexp)
 ("C-M-w" . sp-copy-sexp)

 ("C-M-d" . delete-sexp)

 ("M-<backspace>" . backward-kill-word)
 ("C-<backspace>" . sp-backward-kill-word)
 ([remap sp-backward-kill-word] . backward-kill-word)

 ("M-[" . sp-backward-unwrap-sexp)
 ("M-]" . sp-unwrap-sexp)

 ("C-x C-t" . sp-transpose-hybrid-sexp)

 ("C-c ("  . wrap-with-parens)
 ("C-c ["  . wrap-with-brackets)
 ("C-c {"  . wrap-with-braces)
 ("C-c '"  . wrap-with-single-quotes)
 ("C-c \"" . wrap-with-double-quotes)
 ("C-c _"  . wrap-with-underscores)
("C-c `"  . wrap-with-back-quotes)
))


#+END_SRC
** Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
:ensure t
:init
(progn
(bind-key "C-x g" 'magit-status)
))
#+END_SRC
** LaTeX
#+BEGIN_SRC emacs-lisp

;; latex
;(use-package tex
;:ensure auctex)

;(defun tex-view ()
;    (interactive)
;    (tex-send-command "evince" (tex-append tex-print-file ".pdf")))
#+END_SRC
** misc
#+BEGIN_SRC emacs-lisp
 (global-auto-revert-mode 1)

#+END_SRC
* Programming
** c++
#+BEGIN_SRC emacs-lisp
  (use-package ggtags
  :ensure t
  :config 
  (add-hook 'c-mode-common-hook
            (lambda ()
              (when (derived-mode-p 'c-mode 'c++-mode 'java-mode)
                (ggtags-mode 1))))
  )
  ; let's define a function which initializes auto-complete-c-headers and gets called for c/c++ hooks
  (defun my:ac-c-header-init ()
    (require 'auto-complete-c-headers)
    (add-to-list 'ac-sources 'ac-source-c-headers)
    (add-to-list 'achead:include-directories '"/Applications/Xcode.app/Contents/Developer/usr/llvm-gcc-4.2/lib/gcc/i686-apple-darwin11/4.2.1/include")
  )
(c-add-style "my-style" 
	     '("stroustrup"
	       (indent-tabs-mode . nil)        ; use spaces rather than tabs
	       (c-basic-offset . 2)            ; indent by four spaces
	       (c-offsets-alist . ((inline-open . 0)  ; custom indentation rules
				   (brace-list-open . 0)
				   (statement-case-open . +)))))

(defun my-c++-mode-hook ()
  (c-set-style "my-style")        ; use my-style defined above
  (auto-fill-mode)         
  (c-toggle-auto-hungry-state 1))

(setq-default c-basic-offset 2
                  tab-width 2
                  indent-tabs-mode t)

(add-hook 'c++-mode-hook 'my-c++-mode-hook)

  ; now let's call this function from c/c++ hooks
  (add-hook 'c++-mode-hook 'my:ac-c-header-init)
  (add-hook 'c-mode-hook 'my:ac-c-header-init)


  ; turn on Semantic
  (semantic-mode 1)
  ; let's define a function which adds semantic as a suggestion backend to auto complete
  ; and hook this function to c-mode-common-hook
  (defun my:add-semantic-to-autocomplete() 
    (add-to-list 'ac-sources 'ac-source-semantic)
  )
  (add-hook 'c-mode-common-hook 'my:add-semantic-to-autocomplete)

  ;; c++ mode debugging
  (global-set-key (kbd "<C-f5>") 'gdb)

  (global-set-key (kbd "<f7>")'compile)
  (global-set-key (kbd "<f9>") 'gud-break)

  (global-set-key (kbd "<f10>") 'gud-next)
  (global-set-key (kbd "<f11>") 'gud-step)


  ;; (global-set-key (kbd "<XF86AudioPlay>") 'compile)
  ;; (global-set-key (kbd "<XF86Search>") 'gdb)


#+END_SRC

#+RESULTS:
| (lambda nil (when (derived-mode-p (quote c-mode) (quote c++-mode) (quote java-mode)) (ggtags-mode 1))) | my:add-semantic-to-autocomplete | (lambda nil (if (derived-mode-p (quote c-mode) (quote c++-mode) (quote java-mode)) (progn (ggtags-mode 1)))) | ac-cc-mode-setup |

** Web Mode
#+BEGIN_SRC emacs-lisp
    (use-package web-mode
      :ensure t
      :config
	   (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
	   (add-to-list 'auto-mode-alist '("\\.vue?\\'" . web-mode))
	   (setq web-mode-engines-alist
		 '(("django"    . "\\.html\\'")))
	   (setq web-mode-ac-sources-alist
	   '(("css" . (ac-source-css-property))
	   ("vue" . (ac-source-words-in-buffer ac-source-abbrev))
           ("html" . (ac-source-words-in-buffer ac-source-abbrev))))
  (setq web-mode-enable-auto-closing t))
  (setq web-mode-enable-auto-quoting t) ; this fixes the quote problem I mentioned
  (setq web-mode-markup-indent-offset 2)
  (setq web-mode-css-indent-offset 2)
  (setq web-mode-code-indent-offset 2)

#+END_SRC
* Shell
** Better Shell
#+BEGIN_SRC emacs-lisp :tangle no
(use-package better-shell
    :ensure t
    :bind (("C-'" . better-shell-shell)
           ("C-;" . better-shell-remote-open)))
#+END_SRC
** eshell stuff
#+BEGIN_SRC emacs-lisp

  (use-package shell-switcher
    :ensure t
    :config 
    (setq shell-switcher-mode t)
    :bind (("C-'" . shell-switcher-switch-buffer)
	   ("C-x 4 '" . shell-switcher-switch-buffer-other-window)
	   ("C-M-'" . shell-switcher-new-shell)))

#+END_SRC
#+RESULTS:
: t
* Elfeed
#+BEGIN_SRC emacs-lisp
(setq elfeed-db-directory "~/Dropbox/shared/elfeeddb")

;; use an org file to organise feeds
(use-package elfeed-org
  :ensure t
  :config
  (elfeed-org)
  (setq rmh-elfeed-org-files (list "~/Dropbox/shared/elfeed.org")))

(defun elfeed-mark-all-as-read ()
      (interactive)
      (mark-whole-buffer)
      (elfeed-search-untag-all-unread))

;;functions to support syncing .elfeed between machines
;;makes sure elfeed reads index from disk before launching
(defun bjm/elfeed-load-db-and-open ()
  "Wrapper to load the elfeed db from disk before opening"
  (interactive)
  (elfeed-db-load)
  (elfeed)
  (elfeed-search-update--force))

;;write to disk when quiting
(defun bjm/elfeed-save-db-and-bury ()
  "Wrapper to save the elfeed db to disk before burying buffer"
  (interactive)
  (elfeed-db-save)
  (quit-window))

(defalias 'elfeed-toggle-star
  (elfeed-expose #'elfeed-search-toggle-all 'star))

(use-package elfeed
  :ensure t
  :bind (:map elfeed-search-mode-map
	      ("q" . bjm/elfeed-save-db-and-bury)
	      ("Q" . bjm/elfeed-save-db-and-bury)
	      ("m" . elfeed-toggle-star)
	      ("M" . elfeed-toggle-star)
              ("j" . vmj/hydra-elfeed/body)
	      ("J" . vmj/hydra-elfeed/body)
	      ))

(use-package elfeed-goodies
  :ensure t
  :config
  (elfeed-goodies/setup))

(defhydra vmj/hydra-elfeed ()
   "filter"
   ("c" (elfeed-search-set-filter "@6-months-ago +cs") "cs")
   ("e" (elfeed-search-set-filter "@6-months-ago +emacs") "emacs")
   ("o" (elfeed-search-set-filter "@6-months-ago +mitocw") "mitocw")
   ("*" (elfeed-search-set-filter "@6-months-ago +star") "Starred")
   ("M" elfeed-toggle-star "Mark")
   ("A" (elfeed-search-set-filter "@6-months-ago") "All")
   ("T" (elfeed-search-set-filter "@1-day-ago") "Today")
   ("Q" bjm/elfeed-save-db-and-bury "Quit Elfeed" :color blue)
   ("q" nil "quit" :color blue)
   )

#+END_SRC
* Transpose lines
#+BEGIN_SRC emacs-lisp

(defun move-line (n)
  "Move the current line up or down by N lines."
  (interactive "p")
  (setq col (current-column))
  (beginning-of-line) (setq start (point))
  (end-of-line) (forward-char) (setq end (point))
  (let ((line-text (delete-and-extract-region start end)))
    (forward-line n)
    (insert line-text)
    ;; restore point to original column in moved line
    (forward-line -1)
    (forward-char col)))

(defun move-line-up (n)
  "Move the current line up by N lines."
  (interactive "p")
  (move-line (if (null n) -1 (- n))))

(defun move-line-down (n)
  "Move the current line down by N lines."
  (interactive "p")
  (move-line (if (null n) 1 n)))

(global-set-key (kbd "C-M-<up>") 'move-line-up)
(global-set-key (kbd "C-M-<down>") 'move-line-down)
#+END_SRC

* Key bindings 
#+BEGIN_SRC emacs-lisp
   ;;Keyboard mappings
  (setq user-full-name "Vinodh MJ Human" user-mail-address "vinodhmjhuman@gmail.com")
  (global-set-key (kbd "\e\ei") (lambda () (interactive) (find-file "~/Dropbox/orgfiles/i.org")))
  (global-set-key (kbd "\e\el") (lambda () (interactive) (find-file "~/Dropbox/orgfiles/links.org")))
  (global-set-key (kbd "\e\ew") (lambda () (interactive) (find-file "~/Dropbox/orgfiles/word.org")))
  (global-set-key (kbd "\e\ec") (lambda () (interactive) (find-file "~/.emacs.d/myinit.org")))
  (global-set-key (kbd "\e\eb") (lambda () (interactive) (find-file "~/Dropbox/orgfiles/books.org")))


  (global-set-key (kbd "<f4>") 'kmacro-end-and-call-macro)
  (global-set-key (kbd "<f5>") 'revert-buffer)
  (global-set-key (kbd "C-\\") "\C-a\C- \C-e\M-w") ;copy current line
  (global-set-key (kbd "<C-f7>") 'toggle-truncate-lines)
  (global-set-key (kbd "C-`") 'other-window)
  (global-set-key (kbd "<C-iso-lefttab>") 'other-window)
  (global-set-key (kbd "C-<return>") 'jump-to-next-newline)
  (global-set-key (kbd "C-x o") 'swap-window)
  (global-set-key (kbd "<C-f6>") 'mlint-clear-warnings)

  (global-set-key (kbd "C-<") 'beginning-of-buffer)
  (global-set-key (kbd "C->") 'end-of-buffer)

  (global-set-key (kbd "<f8>") 'view-mode)

  (global-set-key (kbd "C-;") 'iedit-mode)



#+END_SRC
* edit server & emacs chrome
#+BEGIN_SRC emacs-lisp
(use-package edit-server
	:ensure t 
	:config
        (when (locate-library "edit-server")
        (setq edit-server-new-frame nil)
        (edit-server-start)))
#+END_SRC
* Engine mode 
Enable [[https://github.com/hrs/engine-mode][engine-mode]] and define a few useful engines.

#+BEGIN_SRC emacs-lisp
  (require 'engine-mode)

  (defengine duckduckgo
    "https://duckduckgo.com/?q=%s"
    :keybinding "d")

  (defengine github
    "https://github.com/search?ref=simplesearch&q=%s"
    :keybinding "g")

  (defengine google
    "http://www.google.com/search?ie=utf-8&oe=utf-8&q=%s"
    :keybinding "l")

  (defengine rfcs
    "http://pretty-rfc.herokuapp.com/search?q=%s")

  (defengine stack-overflow
    "https://stackoverflow.com/search?q=%s"
    :keybinding "s")

  (defengine wikipedia
    "http://www.wikipedia.org/search-redirect.php?language=en&go=Go&search=%s"
    :keybinding "w")

  (defengine wiktionary
    "https://www.wikipedia.org/search-redirect.php?family=wiktionary&language=en&go=Go&search=%s")

  (defengine youtube
    "https://www.youtube.com/results?search_query=%s"
    :keybinding "y")

  (engine-mode t)

#+END_SRC

#+RESULTS:
: t

* ediff
#+BEGIN_SRC emacs-lisp
  (setq ediff-split-window-function 'split-window-vertically)
  
#+END_SRC

#+RESULTS:
: split-window-vertically


